/**
 * If the project is split into multiple subprojects (which is not the case in this example),
 * this file must be in the subproject that defines the entity.
 *
 * This file is compiled by the annotation processor, when it is modified:
 *
 * 1. If any other Java code is modified, you can directly click the `Run` button of Intellij
 *
 * 2. Otherwise, the project must be rebuilt
 */


// Abstract type will not generate java/kt code
abstract input AbstractBookInput {

    /*
     * #allScalars: All scalar fields of `Book`, `TenantAware` and `BaseEntity`
     *
     * #allScalars(Book): All scalar fields of `Book`, exclude `TenantAware` and `BaseEntity`
     */
    #allScalars(Book)
}

input BookInput : AbstractBookInput {

    /*
     * You can also write `storeId` because the @IdView property `Book.storeId` has already been defined.
     *
     * However, this is better way to not assume that `@IdView` property must be present.
     */
    id(store)

    /*
     * You can also write `authorIds` because the @IdView property `Book.authorIds` has already been defined.
     *
     * However, this is better way to not assume that `@IdView` property must be present.
     */
    id(authors) as authorIds // Override default alias `authorsId`
}

input CompositeBookInput: AbstractBookInput {

    store {
        #allScalars(BookStore)
        -id // Remove id
    }

    authors {
        #allScalars(Author)
        -id // Remove id
    }
}
